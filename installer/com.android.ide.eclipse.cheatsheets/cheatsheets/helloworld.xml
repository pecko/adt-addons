<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet
      title="Android Hello, World tutorial">
   <intro>
      <description>
         This cheat sheet helps you to create a first Android application.
         <br/><br/>
         As a developer, you know that the first impression of a development framework is how easy it is to write &quot;Hello, World.&quot; 
         Well, on Android, it&apos;s pretty easy. It&apos;s particularly easy if you&apos;re using Eclipse as your IDE, 
         because we&apos;ve provided a great plugin that handles your project creation and management to greatly speed-up your development cycles.
      </description>
   </intro>
   <item title="Open the Java perspective" dialog="false" skip="false" href="/org.eclipse.platform.doc.user/concepts/concepts-4.htm">
      <description>
         If you&apos;re not already in the Java perspective, in the main menu select <b>Window</b> &gt; <b>Open Perspective</b> &gt; <b>Java</b> or click on the &quot;Click to Perform&quot; link below.
      </description>
      <command serialization="org.eclipse.ui.perspectives.showPerspective(org.eclipse.ui.perspectives.showPerspective.perspectiveId=org.eclipse.jdt.ui.JavaPerspective)" required="false" translate="">
      </command>
   </item>
   <item
         title="Create a New Android Project" skip="true">
      <description>
         The next step is to start a new Android project in Eclipse.

<br/><br/>
 <b>  1. From Eclipse, select File &gt; New &gt; Project </b>.
<br/><br/>
      If the ADT Plugin for Eclipse has been successfully installed, the resulting dialog should have a folder labeled &quot;Android&quot; which should contain &quot;Android Project&quot;. (After you create one or more Android projects, an entry for &quot;Android XML File&quot; will also be available.)
         The next step is to start a new Android project in Eclipse.
<br/><br/>
<b>   2. Select &quot;Android Project&quot; and click Next. </b>
<br/><br/>
 <b>  3. Fill in the project details with the following values: </b>
 <br/><br/>
          * Project name:     <b>HelloAndroid</b>
 <br/>
          * Application name: <b>Hello, Android</b>
 <br/>
          * Package name:     <b> com.example.helloandroid</b>
 <br/>
          * Create Activity: <b>HelloAndroid</b>
<br/><br/>
      <b>Click Finish.</b>
<br/><br/>
      Here is a description of each field:
<br/>

      <b>Project Name</b><br/>
          This is the Eclipse Project name — the name of the directory that will contain the project files.
<br/>          
      <b>Application Name</b><br/>
          This is the human-readable title for your application — the name that will appear on the Android device.
<br/>
      <b>Package Name</b><br/>
          This is the package namespace (following the same rules as for packages in the Java programming language) that you want all your source code to reside under. 
          This also sets the package name under which the stub Activity will be generated.
          Your package name must be unique across all packages installed on the Android system; for this reason, it&apos;s important to use a standard domain-style package for your applications. 
          The example above uses the &quot;com.example&quot; namespace, which is a namespace reserved for example documentation — when you develop your own applications, you should use a namespace that&apos;s appropriate to your organization or entity.
<br/>
      <b>Create Activity</b><br/>
          This is the name for the class stub that will be generated by the plugin. 
          This will be a subclass of Android&apos;s Activity class. 
          An Activity is simply a class that can run and do work. 
          It can create a UI if it chooses, but it doesn&apos;t need to. 
          As the checkbox suggests, this is optional, but an Activity is almost always used as the basis for an application.
<br/>
      <b>Min SDK Version</b><br/>
          This value specifies the minimum API Level required by your application. For more information, see Android API Levels. 
<br/><br/>
      Other fields: The checkbox for &quot;Use default location&quot; allows you to change the location on disk where the project&apos;s files will be
      generated and stored. &quot;Build Target&quot; is the platform target that your application will be compiled against (this should be selected automatically, based on your Min SDK Version).
      
<br/><br/>
Your Android project is now ready. It should be visible in the Package Explorer on the left.
<br/><br/>
 Open the <b>HelloAndroid.java</b> file, located inside <b>HelloAndroid &gt; src &gt; com.example.helloandroid </b>).
 <br/>
 Notice that the class is based on the <b>Activity</b> class. 
 An Activity is a single application entity that is used to perform actions. 
 An application may have many separate activities, but the user interacts with them one at a time. 
 The <b>onCreate()</b> method will be called by the Android system when your Activity starts 
 — it is where you should perform all initialization and UI setup. 
 An activity is not required to have a user interface, but usually will.
<br/><br/>
Now let's modify some code! 
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.ImportProject"
		param1="platform:/plugin/com.android.ide.eclipse.cheatsheets/projects/HelloWorld.zip"
		param2="HelloAndroid"
		param3="/HelloAndroid/src/com/example/helloandroid/HelloAndroid.java"/>
   </item>
   <item
         skip="true"
         title="Construct the UI">
      <description>
         Take a look at the revised code below and then make the same changes to your HelloAndroid class. The bold items are lines that have been added.
<br/><br/>
package com.example.helloandroid;
<br/><br/>
import android.app.Activity;<br/>
import android.os.Bundle;<br/>
<b>import android.widget.TextView;</b><br/>
<br/><br/>
public class HelloAndroid extends Activity { <br/>
   /** Called when the activity is first created. */ <br/>
   @Override <br/>
   public void onCreate(Bundle savedInstanceState) { <br/>
       super.onCreate(savedInstanceState);<br/>
<b>       TextView tv = new TextView(this);</b><br/>
<b>       tv.setText(&quot;Hello, Android&quot;);</b><br/>
<b>       setContentView(tv);</b><br/>
   }<br/>
}<br/>
<br/>
<br/>
<b>Tip:</b> An easy way to add import packages to your project is to press <b>Ctrl-Shift-O</b> (<b>Cmd-Shift-O</b>, on Mac). 
This is an Eclipse shortcut that identifies missing packages based on your code and adds them for you.
<br/><br/>
An Android user interface is composed of hierarchies of objects called <b>Views</b>. 
A <b>View</b> is a drawable object used as an element in your UI layout, such as a button, 
image, or (in this case) a text label. Each of these objects is a subclass of the <b>View</b> class 
and the subclass that handles text is <b>TextView</b>.
<br/><br/>
In this change, you create a <b>TextView</b> with the class constructor, which accepts an Android <b>Context</b> instance 
as its parameter. A <b>Context</b> is a handle to the system; it provides services like resolving resources, obtaining access to databases and preferences, and so on. 
The Activity class inherits from Context, and because your HelloAndroid class is a subclass of Activity, it is also a Context. 
So, you can pass <b>this</b> as your Context reference to the TextView.
<br/><br/>
Next, you define the text content with <b>setText()</b>.
<br/><br/>
Finally, you pass the TextView to setContentView() in order to display it as the content for the Activity UI. 
If your Activity doesn't call this method, then no UI is present and the system will display a blank screen.
<br/><br/>
There it is — "Hello, World" in Android! The next step, of course, is to see it running.
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.ChangeOrCreateFile"
		param1="/HelloAndroid/src/com/example/helloandroid/HelloAndroid.java"
		param2="platform:/plugin/com.android.ide.eclipse.cheatsheets/resources/HelloAndroid1.txt"/>
   </item>
   <item
         skip="true"
         title="Run Application">
      <description>
         The Eclipse plugin makes it easy to run your applications:
<br/><br/>
   <b>1.</b> Select <b>Run > Run.</b><br/>
   <b>2.</b> Select <b>"Android Application".</b>
<br/><br/>
The Eclipse ADT will automatically create a new run configuration for your project and the Android Emulator will automatically launch. 
Once the emulator is booted up, your application will appear after a moment. 
<br/><br/>
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.LaunchAndroidApplication"
		param1="HelloAndroid"/>
   </item>
   <item
         skip="true"
         title="Emulator">
      <description>
         
The "Hello, Android" you see in the grey bar is actually the application title. 
The Eclipse plugin creates this automatically (the string is defined in the res/values/strings.xml
 file and referenced by your AndroidManifest.xml file). 
 The text below the title is the actual text that you have created in the TextView object.
That concludes the basic "Hello World" tutorial, but you should continue reading for 
some more valuable information about developing Android applications.
      </description>   
         
   </item>
   <item
         skip="true"
         title="Developing In Eclipse, with ADT">
      <description>
         To learn more about creating and editing run configurations in Eclipse, refer to Developing In Eclipse, with ADT.
      </description>   
      <command serialization="org.eclipse.ui.browser.openBrowser(url=http://developer.android.com/guide/developing/eclipse-adt.html#RunConfig)"/>
         
   </item>
   <item
         skip="true"
         title="Upgrade the UI to an XML Layout">
      <description>
         The &quot;Hello, World&quot; example you just completed uses what is called a &quot;programmatic&quot; UI layout. 
         This means that you constructed and built your application&apos;s UI directly in source code. 
         If you&apos;ve done much UI programming, you&apos;re probably familiar with how brittle that approach can sometimes be: 
         small changes in layout can result in big source-code headaches. 
         It&apos;s also easy to forget to properly connect Views together, which can result in errors in your layout 
         and wasted time debugging your code.
<br/><br/>
That&apos;s why Android provides an alternate UI construction model: XML-based layout files. 
The easiest way to explain this concept is to show an example. Here&apos;s an XML layout file
 that is identical in behavior to the programmatically-constructed example:
<br/><br/>
 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <br/>
&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; <br/>
  android:layout_width=&quot;fill_parent&quot; <br/>
  android:layout_height=&quot;fill_parent&quot; <br/>
  android:text=&quot;@string/hello&quot;/&gt; <br/>
<br/>
The general structure of an Android XML layout file is simple: 
it&apos;s a tree of XML elements, wherein each node is the name of a <b>View</b> class 
(this example, however, is just one View element). 
You can use the name of any class that extends View as an element in your XML layouts, 
including custom View classes you define in your own code. 
This structure makes it easy to quickly build up UIs, using a more simple structure and syntax 
than you would use in a programmatic layout. 
This model is inspired by the web development model, wherein you can separate the presentation of your application (its UI) from the application logic used to fetch and fill in data.

<br/><br/>
In the above XML example, there&apos;s just one View element: the <b>TextView</b>, 
which has four XML attributes. Here&apos;s a summary of what they mean:

<br/><br/>

* <b>xmlns:android</b> - This is an XML namespace declaration that tells the Android tools that you are going to refer to common attributes defined in the Android namespace. The outermost tag in every Android layout file must have this attribute.
<br/>
* <b>android:layout_width</b> - This attribute defines how much of the available width on the screen this View should consume. In this case, it&apos;s the only View so you want it to take up the entire screen, which is what a value of &quot;fill_parent&quot; means.
<br/>
* <b>android:layout_height</b> - This is just like android:layout_width, except that it refers to available screen height.
<br/>
* <b>android:text</b> 	This sets the text that the TextView should display. 
In this example, you use a string resource instead of a hard-coded string value. 
The hello string is defined in the res/values/strings.xml file. 
This is the recommended practice for inserting strings to your application, 
because it makes the localization of your application to other languages graceful, 
without need to hard-code changes to the layout file. 
For more information, see <b>Resources and Internationalization</b>.
<br/>

      </description>   
      <command serialization="org.eclipse.ui.browser.openBrowser(url=http://developer.android.com/guide/topics/resources/resources-i18n.html#RunConfig)"/>
       
   </item>
      <item
         skip="true"
         title="Modify main.xml layout">
      <description>
         These XML layout files belong in the res/layout/ directory of your project. 
         The &quot;res&quot; is short for &quot;resources&quot; and the directory contains all the non-code assets that your application requires. 
         In addition to layout files, resources also include assets such as images, sounds, and localized strings.
<br/>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
  android:layout_width=&quot;fill_parent&quot;
  android:layout_height=&quot;fill_parent&quot;
  android:text=&quot;@string/hello&quot;/&gt;
  
<br/>
<b>Landscape layout</b>
<br/>
When you want a different design for landscape, put your layout XML file inside /res/layout-land. 
Android will automatically look here when the layout changes. 
Without this special landscape layout defined, Android will stretch the default layout.
<br/>
<br/>

The Eclipse plugin automatically creates one of these layout files for you: main.xml. 
In the &quot;Hello World&quot; application you just completed, this file was ignored and you created a layout programmatically. 
This was meant to teach you more about the Android framework, but you should almost always define your layout in an XML file instead of in your code. 
The following procedures will instruct you how to change your existing application to use an XML layout.
<br/><br/>
In the Eclipse Package Explorer, expand the <b>/res/layout/</b> folder and open <b>main.xml</b> 
(once opened, you might need to click the &quot;main.xml&quot; tab at the bottom of the window to see the XML source). 
Replace the contents with the following XML:
<br/><br/>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <br/>
&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; <br/>
  android:layout_width=&quot;fill_parent&quot; <br/>
  android:layout_height=&quot;fill_parent&quot; <br/>
  android:text=&quot;@string/hello&quot;/&gt; <br/>
<br/>
<br/>
Save the file.
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.ChangeOrCreateFile"
		param1="/HelloAndroid/res/layout/main.xml"
		param2="platform:/plugin/com.android.ide.eclipse.cheatsheets/resources/main1.xml"/>
   </item>
   <item
         skip="true"
         title="Modify strings.xml values">
      <description>
         Inside the <b>res/values/</b> folder, open <b>strings.xml</b>. 
         This is where you should save all default text strings for your user interface. 
         If you&apos;re using Eclipse, then ADT will have started you with two strings, hello and app_name. 
         Revise hello to something else. Perhaps &quot;Hello, Android! I am a string resource!&quot; 
         The entire file should now look like this: 
<br/><br/>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <br/>
&lt;resources&gt; <br/>
    &lt;string name=&quot;hello&quot;&gt;Hello, Android! I am a string resource!&lt;/string&gt; <br/>
    &lt;string name=&quot;app_name&quot;&gt;Hello, Android&lt;/string&gt; <br/>
&lt;/resources&gt; <br/>
<br/>
<br/>        
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.ChangeOrCreateFile"
		param1="/HelloAndroid/res/values/strings.xml"
		param2="platform:/plugin/com.android.ide.eclipse.cheatsheets/resources/strings1.xml"/>
   </item>
   <item
         skip="true"
         title="Modify HelloAndroid class">
      <description>
         Now open and modify your HelloAndroid class use the XML layout. 
         Edit the file to look like this: 
<br/><br/>
package com.example.helloandroid;<br/>
<br/>

import android.app.Activity;<br/>
import android.os.Bundle;<br/>
<br/>

public class HelloAndroid extends Activity { <br/>
    /** Called when the activity is first created. */ <br/>
    @Override <br/>
    public void onCreate(Bundle savedInstanceState) { <br/>
        super.onCreate(savedInstanceState); <br/>
        setContentView(R.layout.main); <br/>
    } <br/>
}
<br/><br/>
      When you make this change, type it by hand to try the code-completion feature. 
      As you begin typing "R.layout.main" the plugin will offer you suggestions. 
      You'll find that it helps in a lot of situations.
<br/><br/>
      Instead of passing setContentView() a View object, 
      you give it a reference to the layout resource. 
      The resource is identified as R.layout.main, 
      which is actually a compiled object representation of the layout 
      defined in /res/layout/main.xml. 
      The Eclipse plugin automatically creates this reference for you inside 
      the project's R.java class. 
      If you're not using Eclipse, then the R.java class will be generated 
      for you when you run Ant to build the application. 
      (More about the R class in a moment.)

      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.ChangeOrCreateFile"
		param1="/HelloAndroid/src/com/example/helloandroid/HelloAndroid.java"
		param2="platform:/plugin/com.android.ide.eclipse.cheatsheets/resources/HelloAndroid2.txt"/>
   </item>
   <item
         skip="true"
         title="Re-run your application">
      <description>
         Now re-run your application — because you've created a launch configuration, 
all you need to do is click the green arrow icon to run, or select <b>Run &gt; Run History &gt; Android Activity</b>. 
Other than the change to the TextView string, the application looks the same.
 After all, the point was to show that the two different layout approaches produce identical results.
<br/><br/>
<b>Tip:</b> Use the shortcut <b>Ctrl-F11</b> (<b>Cmd-Shift-F11</b>, on Mac) to run your currently visible application.
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.LaunchAndroidApplication"
		param1="HelloAndroid"/>
   </item>
   <item
         skip="true"
         title="R class">
      <description>
         In Eclipse, open the file named <b>R.java</b> (in the <b>gen/  [Generated Java Files] folder)</b>.
         A project's R.java file is an index into all the resources defined in the file. 
         You use this class in your source code as a sort of short-hand way to refer to resources you've included in your project. 
         This is particularly powerful with the code-completion features of IDEs like Eclipse because it lets you quickly and interactively
         locate the specific reference you're looking for.
<br/><br/>

It's possible yours looks slighly different than this (perhaps the hexadecimal values are different). 
For now, notice the inner class named "layout", and its member field "main". 
The Eclipse plugin noticed the XML layout file named main.xml and generated a class for it here. 
As you add other resources to your project (such as strings in the <b>res/values/string.xml</b> file or drawables inside the <b>res/drawable/</b> direcory) 
you'll see R.java change to keep up.
<br/><br/>
You should never edit this file by hand.
<br/><br/>
Continue reading for an introduction to debugging. 
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.OpenFile"
		param3="/HelloAndroid/gen/com/example/helloandroid/R.java"/>
   </item>
   <item
         skip="true"
         title="Debug Your Project">
      <description>
         The Android Plugin for Eclipse also has excellent integration with the Eclipse debugger. To demonstrate this, introduce a bug into your code. 
      </description>   
   </item>   
   <item 
   		skip="true"
        title="Change HelloAndroid class"> 
	 <description>
Change your HelloAndroid source code to look like this: <br/>
package com.example.helloandroid;<br/>
<br/>
import android.app.Activity;<br/>
import android.os.Bundle;<br/>

public class HelloAndroid extends Activity { <br/>
    /** Called when the activity is first created. */ <br/>
    @Override <br/>
    public void onCreate(Bundle savedInstanceState) { <br/>
        super.onCreate(savedInstanceState); <br/>
        Object o = null; <br/>
        o.toString(); <br/>
        setContentView(R.layout.main); <br/>
    } <br/>
} <br/>
<br/>
This change simply introduces a NullPointerException into your code.
    </description>         
	<action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.ChangeOrCreateFile"
		param1="/HelloAndroid/src/com/example/helloandroid/HelloAndroid.java"
		param2="platform:/plugin/com.android.ide.eclipse.cheatsheets/resources/HelloAndroid3.txt"/>
	</item>
	<item
         skip="true"
         title="Re-run your application">
      <description>
         The application will crash. 
         Press "Force Quit" to terminate the application and close the emulator window.
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.LaunchAndroidApplication"
		param1="HelloAndroid"/>
   </item>
   <item
         skip="true"
         title="Set breakpoint">
      <description>
         To find out more about the error, set a breakpoint in your source code on the line <b>Object o = null;</b> (double-click on the marker bar next to the source code line).
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.SetBreakpoint"
		param1="/HelloAndroid"
		param2="com/example/helloandroid/HelloAndroid.java"
		param3="com.example.helloandroid.HelloAndroid"
		param4="11" />
   </item>
   <item
         skip="true"
         title="Debug your application">
      <description>
          Then select Debug &gt; Debug History &gt; Hello, Android from the menu to enter debug mode. 
          Your app will restart in the emulator, but this time it will suspend when it reaches the breakpoint you set. 
          You can then step through the code in Eclipse's Debug Perspective, 
          just as you would for any other application.
      </description>
      <action
		pluginId="com.android.ide.eclipse.cheatsheets"
		class="com.android.ide.eclipse.cheatsheets.actions.LaunchAndroidApplication"
		param1="HelloAndroid"
		param2="debug"/>
   </item>
</cheatsheet>
